diff --git a/olsync/olbrowserlogin.py b/olsync/olbrowserlogin.py
new file mode 100644
index 0000000..e2b464d
--- /dev/null
+++ b/olsync/olbrowserlogin.py
@@ -0,0 +1,84 @@
+"""Ol Browser Login Utility"""
+##################################################
+# MIT License
+##################################################
+# File: olbrowserlogin.py
+# Description: Overleaf Browser Login Utility
+# Author: Moritz Gl√∂ckl
+# License: MIT
+# Version: 1.1.4
+##################################################
+
+from PyQt5.QtCore import *
+from PyQt5.QtWidgets import *
+from PyQt5.QtWebEngineWidgets import *
+
+# Where to get the CSRF Token and where to send the login request to
+LOGIN_URL = "https://www.overleaf.com/login"
+PROJECT_URL = "https://www.overleaf.com/project"  # The dashboard URL
+# JS snippet to extract the csrfToken
+JAVASCRIPT_CSRF_EXTRACTOR = "document.getElementsByName('ol-csrfToken')[0].content"
+# Name of the cookies we want to extract
+COOKIE_NAMES = ["overleaf_session2", "GCLB"]
+
+
+class OlBrowserLoginWindow(QMainWindow):
+    """
+    Overleaf Browser Login Utility
+    Opens a browser window to securely login the user and returns relevant login data.
+    """
+
+    def __init__(self, *args, **kwargs):
+        super(OlBrowserLoginWindow, self).__init__(*args, **kwargs)
+
+        self.webview = QWebEngineView()
+
+        self._cookies = {}
+        self._csrf = ""
+
+        self.profile = QWebEngineProfile(self.webview)
+        self.cookie_store = self.profile.cookieStore()
+        self.cookie_store.cookieAdded.connect(self.handle_cookie_added)
+        self.profile.setPersistentCookiesPolicy(QWebEngineProfile.NoPersistentCookies)
+
+        self.profile.settings().setAttribute(QWebEngineSettings.JavascriptEnabled, True)
+
+        webpage = QWebEnginePage(self.profile, self)
+        self.webview.setPage(webpage)
+        self.webview.load(QUrl.fromUserInput(LOGIN_URL))
+        self.webview.loadFinished.connect(self.handle_load_finished)
+
+        self.setCentralWidget(self.webview)
+        self.resize(600, 700)
+
+    def handle_load_finished(self):
+        def callback(result):
+            self._csrf = result
+            QCoreApplication.quit()
+
+        if self.webview.url().toString() == PROJECT_URL:
+            self.webview.page().runJavaScript(
+                JAVASCRIPT_CSRF_EXTRACTOR, callback
+            )
+
+    def handle_cookie_added(self, cookie):
+        cookie_name = cookie.name().data().decode('utf-8')
+        if cookie_name in COOKIE_NAMES:
+            self._cookies[cookie_name] = cookie.value().data().decode('utf-8')
+
+    @property
+    def cookies(self):
+        return self._cookies
+
+    @property
+    def csrf(self):
+        return self._csrf
+
+
+def login():
+    app = QApplication([])
+    ol_browser_login_window = OlBrowserLoginWindow()
+    ol_browser_login_window.show()
+    app.exec()
+
+    return {"cookie": ol_browser_login_window.cookies, "csrf": ol_browser_login_window.csrf}
diff --git a/olsync/olclient.py b/olsync/olclient.py
index b999cf5..0d78988 100644
--- a/olsync/olclient.py
+++ b/olsync/olclient.py
@@ -47,6 +47,7 @@ class OverleafClient(object):
 
     def login(self, username, password):
         """
+        WARNING - DEPRECATED - Not working as Overleaf introduced captchas
         Login to the Overleaf Service with a username and a password
         Params: username, password
         Returns: Dict of cookie and CSRF
@@ -161,8 +162,8 @@ class OverleafClient(object):
         # Convert cookie from CookieJar to string
         cookie = "GCLB={}; overleaf_session2={}" \
             .format(
-            reqs.utils.dict_from_cookiejar(self._cookie)["GCLB"],
-            reqs.utils.dict_from_cookiejar(self._cookie)["overleaf_session2"]
+            self._cookie["GCLB"],
+            self._cookie["overleaf_session2"]
         )
 
         # Connect to Overleaf Socket.IO, send a time parameter and the cookies
diff --git a/olsync/olsync.py b/olsync/olsync.py
index 25819d7..9d03b16 100644
--- a/olsync/olsync.py
+++ b/olsync/olsync.py
@@ -23,9 +23,11 @@ import traceback
 try:
     # Import for pip installation / wheel
     from olsync.olclient import OverleafClient
+    import olsync.olbrowserlogin
 except ImportError:
     # Import for development
     from olclient import OverleafClient
+    import olbrowserlogin
 
 
 @click.group(invoke_without_command=True)
@@ -108,27 +110,22 @@ def main(ctx, local, remote, project_name, cookie_path, sync_path, olignore_path
 
 
 @main.command()
-@click.option('-u', '--username', prompt=True, required=True,
-              help="You Overleaf username. Will NOT be stored or used for anything else.")
-@click.option('-p', '--password', prompt=True, hide_input=True, required=True,
-              help="You Overleaf password. Will NOT be stored or used for anything else.")
 @click.option('--path', 'cookie_path', default=".olauth", type=click.Path(exists=False),
               help="Path to store the persisted Overleaf cookie.")
 @click.option('-v', '--verbose', 'verbose', is_flag=True, help="Enable extended error logging.")
-def login(username, password, cookie_path, verbose):
+def login(cookie_path, verbose):
     if os.path.isfile(cookie_path) and not click.confirm(
             'Persisted Overleaf cookie already exist. Do you want to override it?'):
         return
     click.clear()
-    execute_action(lambda: login_handler(username, password, cookie_path), "Login",
+    execute_action(lambda: login_handler(cookie_path), "Login",
                    "Login successful. Cookie persisted as `" + click.format_filename(
                        cookie_path) + "`. You may now sync your project.",
                    "Login failed. Check username and/or password.", verbose)
 
 
-def login_handler(username, password, path):
-    overleaf_client = OverleafClient()
-    store = overleaf_client.login(username, password)
+def login_handler(path):
+    store = olbrowserlogin.login()
     if store is None:
         return False
     with open(path, 'wb+') as f:
diff --git a/requirements.txt b/requirements.txt
index 8f6ec13..d168c73 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,6 +1,11 @@
-requests
-beautifulsoup4
-yaspin
-python-dateutil
-click
-socketIO-client == 0.5.7.2
\ No newline at end of file
+requests~=2.25.1
+beautifulsoup4~=4.9.3
+yaspin~=2.0.0
+python-dateutil~=2.8.1
+click~=8.0.1
+socketIO-client == 0.5.7.2
+PyQt5~=5.15.4
+PyQt5-Qt5~=5.15.2
+PyQt5-sip~=12.9.0
+PyQtWebEngine~=5.15.4
+PyQtWebEngine-Qt5~=5.15.2
\ No newline at end of file
